(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{142:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),o=(n(0),n(182)),i={id:"advanced-features",title:"Advanced Features",original_id:"advanced-features"},c={unversionedId:"schema-generator/customizing-schemas/advanced-features",id:"version-3.x.x/schema-generator/customizing-schemas/advanced-features",isDocsHomePage:!1,title:"Advanced Features",description:"Adding Custom Additional Types",source:"@site/versioned_docs/version-3.x.x/schema-generator/customizing-schemas/advanced-features.md",slug:"/schema-generator/customizing-schemas/advanced-features",permalink:"/graphql-kotlin/docs/3.x.x/schema-generator/customizing-schemas/advanced-features",editUrl:"https://github.com/ExpediaGroup/graphql-kotlin/tree/master/website/versioned_docs/version-3.x.x/schema-generator/customizing-schemas/advanced-features.md",version:"3.x.x",lastUpdatedBy:"Dariusz Kuc",lastUpdatedAt:1621360261,sidebar:"version-3.x.x/docs",previous:{title:"Deprecating Schema",permalink:"/graphql-kotlin/docs/3.x.x/schema-generator/customizing-schemas/deprecating-schema"},next:{title:"Fetching Data",permalink:"/graphql-kotlin/docs/3.x.x/schema-generator/execution/fetching-data"}},d=[{value:"Adding Custom Additional Types",id:"adding-custom-additional-types",children:[{value:"<code>SchemaGenerator::addAdditionalTypesWithAnnotation</code>",id:"schemageneratoraddadditionaltypeswithannotation",children:[]},{value:"<code>SchemaGenerator::generateAdditionalTypes</code>",id:"schemageneratorgenerateadditionaltypes",children:[]}]}],s={toc:d};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"adding-custom-additional-types"},"Adding Custom Additional Types"),Object(o.b)("p",null,"There are a couple ways you can add more types to the schema without having them be directly consumed by a type in your schema.\nThis may be required for ",Object(o.b)("a",{parentName:"p",href:"/graphql-kotlin/docs/3.x.x/federated/apollo-federation"},"Apollo Federation"),", or maybe adding other interface implementations that are not picked up."),Object(o.b)("h3",{id:"schemageneratoraddadditionaltypeswithannotation"},Object(o.b)("inlineCode",{parentName:"h3"},"SchemaGenerator::addAdditionalTypesWithAnnotation")),Object(o.b)("p",null,"This method is protected so if you override the ",Object(o.b)("inlineCode",{parentName:"p"},"SchemaGenerator")," used you can call this method to add types that have a specific annotation.\nYou can see how this is used in ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-kotlin-federation")," as ",Object(o.b)("a",{parentName:"p",href:"https://github.com/ExpediaGroup/graphql-kotlin/blob/master/graphql-kotlin-federation/src/main/kotlin/com/expediagroup/graphql/federation/FederatedSchemaGenerator.kt"},"an example"),"."),Object(o.b)("h3",{id:"schemageneratorgenerateadditionaltypes"},Object(o.b)("inlineCode",{parentName:"h3"},"SchemaGenerator::generateAdditionalTypes")),Object(o.b)("p",null,"This method is called by ",Object(o.b)("inlineCode",{parentName:"p"},"SchemaGenerator::get")," after all the queries, mutations, and subscriptions have been generated and it is going to add all the types saved in an internal set that were not generated by reflection.\nTo change the behaviour, you can update the set and then call the super method with the new value."),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-kotlin"},"\nclass CustomSchemaGenerator(config: SchemaGeneratorConfig) : SchemaGenerator(config) {\n\n    override fun generateAdditionalTypes(types: Set<KType>): Set<GraphQLType> {\n        val newTypes = types.toMutableSet().add(MyNewType()::class.createType())\n        return super.generateAdditionalTypes(newTypes)\n    }\n}\n\n")))}p.isMDXComponent=!0},182:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),l=p(n),m=a,h=l["".concat(i,".").concat(m)]||l[m]||u[m]||o;return n?r.a.createElement(h,c(c({ref:t},s),{},{components:n})):r.a.createElement(h,c({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);