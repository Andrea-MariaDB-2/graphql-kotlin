(self.webpackChunkgraphql_kotlin_docs=self.webpackChunkgraphql_kotlin_docs||[]).push([[9485],{3905:(e,r,t)=>{"use strict";t.d(r,{Zo:()=>c,kt:()=>h});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=n.createContext({}),p=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},c=function(e){var r=p(e.components);return n.createElement(i.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),h=a,m=u["".concat(i,".").concat(h)]||u[h]||d[h]||o;return t?n.createElement(m,s(s({ref:r},c),{},{components:t})):n.createElement(m,s({ref:r},c))}));function h(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=u;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=t[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6205:(e,r,t)=>{"use strict";t.r(r),t.d(r,{frontMatter:()=>l,contentTitle:()=>i,metadata:()=>p,toc:()=>c,default:()=>u});var n=t(2122),a=t(9756),o=(t(7294),t(3905)),s=["components"],l={id:"graphql-request-handler",title:"GraphQLRequestHandler"},i=void 0,p={unversionedId:"server/graphql-request-handler",id:"version-4.x.x/server/graphql-request-handler",isDocsHomePage:!1,title:"GraphQLRequestHandler",description:"The GraphQLRequestHandler is an open and extendable class that contains the basic logic to get a GraphQLResponse.",source:"@site/versioned_docs/version-4.x.x/server/graphql-request-handler.md",sourceDirName:"server",slug:"/server/graphql-request-handler",permalink:"/graphql-kotlin/docs/4.x.x/server/graphql-request-handler",editUrl:"https://github.com/ExpediaGroup/graphql-kotlin/tree/master/website/versioned_docs/version-4.x.x/server/graphql-request-handler.md",version:"4.x.x",lastUpdatedBy:"Dariusz Kuc",lastUpdatedAt:1625610831,formattedLastUpdatedAt:"7/6/2021",frontMatter:{id:"graphql-request-handler",title:"GraphQLRequestHandler"},sidebar:"version-4.x.x/defaultSidebar",previous:{title:"GraphQLContextFactory",permalink:"/graphql-kotlin/docs/4.x.x/server/graphql-context-factory"},next:{title:"GraphQLRequestParser",permalink:"/graphql-kotlin/docs/4.x.x/server/graphql-request-parser"}},c=[],d={toc:c};function u(e){var r=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLRequestHandler")," is an open and extendable class that contains the basic logic to get a ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLResponse"),"."),(0,o.kt)("p",null,"It requires a ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," and a ",(0,o.kt)("a",{parentName:"p",href:"/graphql-kotlin/docs/4.x.x/server/data-loaders"},"DataLoaderRegistryFactory")," in the constructor.\nFor each request, it accepts a ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLRequest")," and an optional ",(0,o.kt)("a",{parentName:"p",href:"/graphql-kotlin/docs/4.x.x/server/graphql-context-factory"},"GraphQLContext"),", and calls the ",(0,o.kt)("inlineCode",{parentName:"p"},"DataLoaderRegistryFactory")," to generate a new ",(0,o.kt)("inlineCode",{parentName:"p"},"DataLoaderRegistry"),".\nThen all of these objects are sent to the schema for execution and the result is mapped to a ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLResponse"),"."),(0,o.kt)("p",null,"There shouldn't be much need to change this class but if you wanted to add custom logic or logging it is possible to override it or just create your own."))}u.isMDXComponent=!0}}]);